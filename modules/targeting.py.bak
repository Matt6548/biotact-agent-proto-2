# -*- coding: utf-8 -*-
"""
recommend_targeting(products: Dict, quarter="Q4-2025") -> List[Dict]
Возвращает рекомендации по таргетингу (аудитория, бюджет, KPI) для 3 ключевых SKU.
Без внешних зависимостей. Пишет результат в exports/targeting_recommendations.json
формате, который понимают GUI/сайт.
"""

import json
from pathlib import Path
from typing import Dict, List

EXPORTS = Path(__file__).resolve().parents[1] / "exports"
EXPORTS.mkdir(parents=True, exist_ok=True)
TARGET_PATH = EXPORTS / "targeting_recommendations.json"

_DEF_SKUS = ["IMMUNOCOMPLEX", "IMMUNOCOMPLEX_KIDS", "BIFOLAK_ZINCUM_C_D3"]

def _pick_skus(products: Dict) -> List[str]:
    if not products:
        return _DEF_SKUS
    out, seen = [], set()
    for k in products.keys():
        sku = str(k).upper().replace(" ", "_")
        if sku not in seen:
            out.append(sku); seen.add(sku)
        if len(out) >= 3:
            break
    # дополним до трёх, если нужно
    for s in _DEF_SKUS:
        if len(out) >= 3: break
        if s not in seen:
            out.append(s)
    return out[:3]

def _audience_for(sku: str) -> Dict:
    if "KIDS" in sku:
        return {"age":"25-45 (родители)", "gender":"all",
                "interests":["дети","школа","здоровье","семейные покупки"],
                "geo":"ЦА/СНГ"}
    if "DERMA" in sku:
        return {"age":"25-45", "gender":"жен", 
                "interests":["красота","уход за кожей","нутрикосметика","wellness"],
                "geo":"ЦА/СНГ"}
    if "OPHTALMO" in sku:
        return {"age":"25-50", "gender":"all",
                "interests":["работа за ПК","здоровье глаз","офис"],
                "geo":"ЦА/СНГ"}
    return {"age":"25-50", "gender":"all",
            "interests":["wellness","ЗОЖ","семья","профилактика"],
            "geo":"ЦА/СНГ"}

def _budget_for(sku: str) -> int:
    return 350 if "KIDS" in sku else 300

def _kpi_for(channel: str = "") -> Dict:
    # соответствие ТЗ: ER>5% (для соцсетей), CTR>2% (для соцсетей/email), конверсия >1%, подкаст ≥70%
    ch = (channel or "").lower()
    return {
        "ER_min_%": 5 if ch in ("instagram","youtube") else 4,
        "CTR_min_%": 2.0 if ch in ("instagram","email","youtube") else 0.8,
        "Conv_min_%": 1.0,
        "Podcast_watch_%": 70 if ch == "podcast" else None
    }

def recommend_targeting(products: Dict, quarter: str = "Q4-2025") -> List[Dict]:
    skus = _pick_skus(products)
    # одно агрегированное правило на SKU (под него можно размножить по каналам в site/при экспорте)
    data = []
    for sku in skus:
        item = {
            "sku": sku,
            "audience": _audience_for(sku),
            "budget_eur": _budget_for(sku),
            "kpi": _kpi_for()  # агрегированный KPI
        }
        data.append(item)

    TARGET_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    return data
