import os, json, base64, requests
from pathlib import Path

def ar_prompt_for(product_name: str):
    return {
        "object": f"Банка {product_name} на светлом фоне",
        "overlays": ["всплывающие пиктограммы с ключевыми компонентами", "подпись: 'Сканируй — узнай состав'"],
        "cta": "Подробнее",
        "slogan": "Поддержка каждый день"
    }

def _svg_fallback(prompt: str, product_name: str, out_svg: Path):
    # Простой постер 1024x1024 без зависимостей
    prompt_short = (prompt[:180] + "…") if len(prompt) > 180 else prompt
    svg = f'''<?xml version="1.0" encoding="UTF-8"?>
<svg width="1024" height="1024" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="g1" x1="0" x2="0" y1="0" y2="1">
      <stop offset="0%" stop-color="#F4F6F8"/>
      <stop offset="100%" stop-color="#EAF3F3"/>
    </linearGradient>
  </defs>
  <rect x="0" y="0" width="1024" height="1024" fill="url(#g1)"/>
  <!-- Силуэт банки -->
  <rect x="372" y="240" width="280" height="420" rx="24" fill="#FFFFFF" stroke="#0AA3A3" stroke-width="6"/>
  <rect x="392" y="260" width="240" height="90" rx="12" fill="#0AA3A3"/>
  <text x="512" y="315" font-family="Segoe UI, Arial" font-size="26" text-anchor="middle" fill="#FFFFFF">{product_name}</text>
  <text x="512" y="520" font-family="Segoe UI, Arial" font-size="34" text-anchor="middle" fill="#28303C">Autumn mood</text>

  <!-- Заголовок -->
  <text x="512" y="760" font-family="Segoe UI, Arial" font-size="40" text-anchor="middle" fill="#0A1830">Biotact — Visual Draft</text>
  <!-- Подпись с кусочком промпта -->
  <text x="512" y="810" font-family="Segoe UI, Arial" font-size="20" text-anchor="middle" fill="#28303C">{prompt_short}</text>

  <!-- Кнопка-CTA -->
  <rect x="412" y="860" width="200" height="56" rx="28" fill="#0AA3A3"/>
  <text x="512" y="896" font-family="Segoe UI, Arial" font-size="20" text-anchor="middle" fill="#FFFFFF">Подробнее</text>
</svg>'''
    out_svg.parent.mkdir(parents=True, exist_ok=True)
    out_svg.write_text(svg, encoding="utf-8")
    return str(out_svg)

def generate_image(prompt: str, out_path: Path, size="1024x1024"):
    """
    Пытаемся сгенерировать PNG через OpenAI Images API.
    Если 403/нет ключа/любая ошибка — создаём локальный SVG-постер и возвращаем путь к нему.
    """
    api_key = os.getenv("OPENAI_API_KEY")
    try:
        if not api_key:
            raise RuntimeError("NO_KEY")
        url = os.getenv("OPENAI_BASE_URL","https://api.openai.com/v1/images/generations")
        model = os.getenv("OPENAI_IMAGE_MODEL","gpt-image-1")
        payload = {"model": model, "prompt": prompt, "size": size}
        r = requests.post(url, headers={"Authorization": f"Bearer {api_key}","Content-Type":"application/json"}, json=payload, timeout=int(os.getenv("OPENAI_TIMEOUT","45")))
        r.raise_for_status()
        data = r.json()["data"][0]["b64_json"]
        img = base64.b64decode(data)
        out_path.parent.mkdir(parents=True, exist_ok=True)
        out_path.write_bytes(img)
        return str(out_path)
    except Exception:
        # Извлечём имя продукта из промпта (до слова " product")
        product = prompt.split(" product")[0].strip() if " product" in prompt else "Biotact"
        out_svg = out_path.with_suffix(".svg")
        return _svg_fallback(prompt, product, out_svg)
